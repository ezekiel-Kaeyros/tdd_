# name: CI Pipelines

# on:
#   push:
#     branches: [ "main" ]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3

#       - name: Login Dockerhub
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#       # - name: create .env file
#       #   run: |
#       #     cd backend && \
#       #     touch .env && \
#       #     echo "API_PORT=4000" > .env && \
#       #     echo "API_URL=https://backend_swivi.swivy.net" >> .env && \
#       #     echo "NODE_ENV=production" >> .env && \
#       #     echo "SECRET=WriteYourSecret" >> .env && \
#       #     echo "FRONTEND_URL=https://swivy.net" >> .env && \
#       #     echo "MONGO_URL=mongodb+srv://eric2mballus:tititata85@cluster0.e1pkdu7.mongodb.net/swivy_db" >> .env && \
#       #     echo "MAILGUN_API_KEY=YOUR_MAILGUN_API_KEY" >> .env && \
#       #     echo "MAILGUN_DOMAIN=YOUR_MAILGUN_DOMAIN" >> .env && \
#       #     echo "SECRET=swivyApp" >> .env && \
#       #     echo "HOST=smtp.ionos.de" >> .env && \
#       #     echo "EMAIL_USERNAME=test@kaeyros-analytics.de" >> .env && \
#       #     echo "EMAIL_PASSWORD=@@Test$$ " >> .env && \
#       #     echo "EMAIL_HOST=smtp.ionos.de " >> .env && \
#       #     echo "EMAIL_USERNAME=test@kaeyros-analytics.de" >> .env

#       - name: Build the Docker image for backend
#         run: |
#           cd backend && docker build -t  ezekielkaeyros/tdd-backend .

#       - name: Push to Dockerhub for backend
#         run: |
 
#           docker push  ezekielkaeyros/tdd-backend:latest

#       - name: Build the Docker image for frontend
#         run: |
#           cd frontend && docker build -t ezekielkaeyros/tdd-frontend .

#       - name: Push to Dockerhub for frontend
#         run: |
        
#           docker push ezekielkaeyros/tdd-frontend:latest

name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME_FRONTEND_TDD: ghcr.io/kaeyros-analytics/tdd_frontend_staging:latest
  IMAGE_NAME_BACKEND_TDD: ghcr.io/kaeyros-analytics/tdd_backend_staging:latest
  CONTAINER_NAME_FRONTEND: tdd_frontend_container
  CONTAINER_NAME_BACKEND: tdd_backend_container

defaults:
  run:
    shell: bash

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.TOKENS }}" | docker login ghcr.io -u "${{ secrets.USERNAME }}" --password-stdin

      - name: Build the Docker image for backend
        run: |
          cd backend && \
          docker build -t ${{ env.IMAGE_NAME_BACKEND_TDD }} .

      - name: Push backend image to GitHub Container Registry
        run: |
          docker push ${{ env.IMAGE_NAME_BACKEND_TDD }}

      - name: Build the Docker image for frontend
        run: |
          cd frontend && \
          docker build -t ${{ env.IMAGE_NAME_FRONTEND_TDD }} .

      - name: Push frontend image to GitHub Container Registry
        run: |
          docker push ${{ env.IMAGE_NAME_FRONTEND_TDD }}

  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci
    environment: staging

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Deploy to my EC2 instance
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SOURCE: "./"
          REMOTE_HOST: ${{ secrets.HOST_DNS }}
          REMOTE_USER: ${{ secrets.USERNAME_SERVER }}
          TARGET: ${{ secrets.TARGET_DIR }}

      - name: Executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME_SERVER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/tdd
            echo "${{ secrets.TOKENS }}" | sudo docker login ghcr.io -u "${{ secrets.USERNAME }}" --password-stdin
            sudo docker pull ${{ env.IMAGE_NAME_BACKEND_TDD }}
            sudo docker pull ${{ env.IMAGE_NAME_FRONTEND_TDD }}
            sudo docker-compose stop backend_tdd
            sudo docker-compose rm -f backend_tdd
            sudo docker-compose up -d backend_tdd
            sudo docker-compose stop frontend_tdd
            sudo docker-compose rm -f frontend_tdd
            sudo docker-compose up -d frontend_tdd
